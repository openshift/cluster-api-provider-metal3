// /*
// Copyright The Kubernetes Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ./baremetal/metal3machine_manager.go

// Package baremetal_mocks is a generated GoMock package.
package baremetal_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	baremetal "github.com/metal3-io/cluster-api-provider-metal3/baremetal"
	v1beta1 "sigs.k8s.io/cluster-api/api/v1beta1"
	errors "sigs.k8s.io/cluster-api/errors"
)

// MockMachineManagerInterface is a mock of MachineManagerInterface interface.
type MockMachineManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMachineManagerInterfaceMockRecorder
}

// MockMachineManagerInterfaceMockRecorder is the mock recorder for MockMachineManagerInterface.
type MockMachineManagerInterfaceMockRecorder struct {
	mock *MockMachineManagerInterface
}

// NewMockMachineManagerInterface creates a new mock instance.
func NewMockMachineManagerInterface(ctrl *gomock.Controller) *MockMachineManagerInterface {
	mock := &MockMachineManagerInterface{ctrl: ctrl}
	mock.recorder = &MockMachineManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineManagerInterface) EXPECT() *MockMachineManagerInterfaceMockRecorder {
	return m.recorder
}

// Associate mocks base method.
func (m *MockMachineManagerInterface) Associate(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Associate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Associate indicates an expected call of Associate.
func (mr *MockMachineManagerInterfaceMockRecorder) Associate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Associate", reflect.TypeOf((*MockMachineManagerInterface)(nil).Associate), arg0)
}

// AssociateM3Metadata mocks base method.
func (m *MockMachineManagerInterface) AssociateM3Metadata(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateM3Metadata", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssociateM3Metadata indicates an expected call of AssociateM3Metadata.
func (mr *MockMachineManagerInterfaceMockRecorder) AssociateM3Metadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateM3Metadata", reflect.TypeOf((*MockMachineManagerInterface)(nil).AssociateM3Metadata), arg0)
}

// CloudProviderEnabled mocks base method.
func (m *MockMachineManagerInterface) CloudProviderEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudProviderEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CloudProviderEnabled indicates an expected call of CloudProviderEnabled.
func (mr *MockMachineManagerInterfaceMockRecorder) CloudProviderEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudProviderEnabled", reflect.TypeOf((*MockMachineManagerInterface)(nil).CloudProviderEnabled))
}

// Delete mocks base method.
func (m *MockMachineManagerInterface) Delete(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMachineManagerInterfaceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMachineManagerInterface)(nil).Delete), arg0)
}

// DissociateM3Metadata mocks base method.
func (m *MockMachineManagerInterface) DissociateM3Metadata(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DissociateM3Metadata", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DissociateM3Metadata indicates an expected call of DissociateM3Metadata.
func (mr *MockMachineManagerInterfaceMockRecorder) DissociateM3Metadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DissociateM3Metadata", reflect.TypeOf((*MockMachineManagerInterface)(nil).DissociateM3Metadata), arg0)
}

// GetProviderIDAndBMHID mocks base method.
func (m *MockMachineManagerInterface) GetProviderIDAndBMHID() (string, *string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderIDAndBMHID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*string)
	return ret0, ret1
}

// GetProviderIDAndBMHID indicates an expected call of GetProviderIDAndBMHID.
func (mr *MockMachineManagerInterfaceMockRecorder) GetProviderIDAndBMHID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderIDAndBMHID", reflect.TypeOf((*MockMachineManagerInterface)(nil).GetProviderIDAndBMHID))
}

// HasAnnotation mocks base method.
func (m *MockMachineManagerInterface) HasAnnotation() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAnnotation")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasAnnotation indicates an expected call of HasAnnotation.
func (mr *MockMachineManagerInterfaceMockRecorder) HasAnnotation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAnnotation", reflect.TypeOf((*MockMachineManagerInterface)(nil).HasAnnotation))
}

// IsBaremetalHostProvisioned mocks base method.
func (m *MockMachineManagerInterface) IsBaremetalHostProvisioned(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBaremetalHostProvisioned", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBaremetalHostProvisioned indicates an expected call of IsBaremetalHostProvisioned.
func (mr *MockMachineManagerInterfaceMockRecorder) IsBaremetalHostProvisioned(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBaremetalHostProvisioned", reflect.TypeOf((*MockMachineManagerInterface)(nil).IsBaremetalHostProvisioned), arg0)
}

// IsBootstrapReady mocks base method.
func (m *MockMachineManagerInterface) IsBootstrapReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBootstrapReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBootstrapReady indicates an expected call of IsBootstrapReady.
func (mr *MockMachineManagerInterfaceMockRecorder) IsBootstrapReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBootstrapReady", reflect.TypeOf((*MockMachineManagerInterface)(nil).IsBootstrapReady))
}

// IsProvisioned mocks base method.
func (m *MockMachineManagerInterface) IsProvisioned() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProvisioned")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsProvisioned indicates an expected call of IsProvisioned.
func (mr *MockMachineManagerInterfaceMockRecorder) IsProvisioned() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProvisioned", reflect.TypeOf((*MockMachineManagerInterface)(nil).IsProvisioned))
}

// MachineHasNodeRef mocks base method.
func (m *MockMachineManagerInterface) MachineHasNodeRef() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachineHasNodeRef")
	ret0, _ := ret[0].(bool)
	return ret0
}

// MachineHasNodeRef indicates an expected call of MachineHasNodeRef.
func (mr *MockMachineManagerInterfaceMockRecorder) MachineHasNodeRef() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachineHasNodeRef", reflect.TypeOf((*MockMachineManagerInterface)(nil).MachineHasNodeRef))
}

// Metal3MachineHasProviderID mocks base method.
func (m *MockMachineManagerInterface) Metal3MachineHasProviderID() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metal3MachineHasProviderID")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Metal3MachineHasProviderID indicates an expected call of Metal3MachineHasProviderID.
func (mr *MockMachineManagerInterfaceMockRecorder) Metal3MachineHasProviderID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metal3MachineHasProviderID", reflect.TypeOf((*MockMachineManagerInterface)(nil).Metal3MachineHasProviderID))
}

// NodeWithMatchingProviderIDExists mocks base method.
func (m *MockMachineManagerInterface) NodeWithMatchingProviderIDExists(arg0 context.Context, arg1 baremetal.ClientGetter) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NodeWithMatchingProviderIDExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NodeWithMatchingProviderIDExists indicates an expected call of NodeWithMatchingProviderIDExists.
func (mr *MockMachineManagerInterfaceMockRecorder) NodeWithMatchingProviderIDExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeWithMatchingProviderIDExists", reflect.TypeOf((*MockMachineManagerInterface)(nil).NodeWithMatchingProviderIDExists), arg0, arg1)
}

// RemovePauseAnnotation mocks base method.
func (m *MockMachineManagerInterface) RemovePauseAnnotation(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePauseAnnotation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePauseAnnotation indicates an expected call of RemovePauseAnnotation.
func (mr *MockMachineManagerInterfaceMockRecorder) RemovePauseAnnotation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePauseAnnotation", reflect.TypeOf((*MockMachineManagerInterface)(nil).RemovePauseAnnotation), arg0)
}

// SetConditionMetal3MachineToFalse mocks base method.
func (m *MockMachineManagerInterface) SetConditionMetal3MachineToFalse(arg0 v1beta1.ConditionType, arg1 string, arg2 v1beta1.ConditionSeverity, arg3 string, arg4 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SetConditionMetal3MachineToFalse", varargs...)
}

// SetConditionMetal3MachineToFalse indicates an expected call of SetConditionMetal3MachineToFalse.
func (mr *MockMachineManagerInterfaceMockRecorder) SetConditionMetal3MachineToFalse(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConditionMetal3MachineToFalse", reflect.TypeOf((*MockMachineManagerInterface)(nil).SetConditionMetal3MachineToFalse), varargs...)
}

// SetConditionMetal3MachineToTrue mocks base method.
func (m *MockMachineManagerInterface) SetConditionMetal3MachineToTrue(arg0 v1beta1.ConditionType) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConditionMetal3MachineToTrue", arg0)
}

// SetConditionMetal3MachineToTrue indicates an expected call of SetConditionMetal3MachineToTrue.
func (mr *MockMachineManagerInterfaceMockRecorder) SetConditionMetal3MachineToTrue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConditionMetal3MachineToTrue", reflect.TypeOf((*MockMachineManagerInterface)(nil).SetConditionMetal3MachineToTrue), arg0)
}

// SetDefaultProviderID mocks base method.
func (m *MockMachineManagerInterface) SetDefaultProviderID() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultProviderID")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultProviderID indicates an expected call of SetDefaultProviderID.
func (mr *MockMachineManagerInterfaceMockRecorder) SetDefaultProviderID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultProviderID", reflect.TypeOf((*MockMachineManagerInterface)(nil).SetDefaultProviderID))
}

// SetError mocks base method.
func (m *MockMachineManagerInterface) SetError(arg0 string, arg1 errors.MachineStatusError) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetError", arg0, arg1)
}

// SetError indicates an expected call of SetError.
func (mr *MockMachineManagerInterfaceMockRecorder) SetError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetError", reflect.TypeOf((*MockMachineManagerInterface)(nil).SetError), arg0, arg1)
}

// SetFinalizer mocks base method.
func (m *MockMachineManagerInterface) SetFinalizer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFinalizer")
}

// SetFinalizer indicates an expected call of SetFinalizer.
func (mr *MockMachineManagerInterfaceMockRecorder) SetFinalizer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalizer", reflect.TypeOf((*MockMachineManagerInterface)(nil).SetFinalizer))
}

// SetNodeProviderIDByHostname mocks base method.
func (m *MockMachineManagerInterface) SetNodeProviderIDByHostname(arg0 context.Context, arg1 baremetal.ClientGetter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNodeProviderIDByHostname", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNodeProviderIDByHostname indicates an expected call of SetNodeProviderIDByHostname.
func (mr *MockMachineManagerInterfaceMockRecorder) SetNodeProviderIDByHostname(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNodeProviderIDByHostname", reflect.TypeOf((*MockMachineManagerInterface)(nil).SetNodeProviderIDByHostname), arg0, arg1)
}

// SetPauseAnnotation mocks base method.
func (m *MockMachineManagerInterface) SetPauseAnnotation(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPauseAnnotation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPauseAnnotation indicates an expected call of SetPauseAnnotation.
func (mr *MockMachineManagerInterfaceMockRecorder) SetPauseAnnotation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPauseAnnotation", reflect.TypeOf((*MockMachineManagerInterface)(nil).SetPauseAnnotation), arg0)
}

// SetProviderID mocks base method.
func (m *MockMachineManagerInterface) SetProviderID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetProviderID", arg0)
}

// SetProviderID indicates an expected call of SetProviderID.
func (mr *MockMachineManagerInterfaceMockRecorder) SetProviderID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProviderID", reflect.TypeOf((*MockMachineManagerInterface)(nil).SetProviderID), arg0)
}

// SetProviderIDFromCloudProviderNode mocks base method.
func (m *MockMachineManagerInterface) SetProviderIDFromCloudProviderNode(arg0 context.Context, arg1 baremetal.ClientGetter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProviderIDFromCloudProviderNode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProviderIDFromCloudProviderNode indicates an expected call of SetProviderIDFromCloudProviderNode.
func (mr *MockMachineManagerInterfaceMockRecorder) SetProviderIDFromCloudProviderNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProviderIDFromCloudProviderNode", reflect.TypeOf((*MockMachineManagerInterface)(nil).SetProviderIDFromCloudProviderNode), arg0, arg1)
}

// SetProviderIDFromNodeLabel mocks base method.
func (m *MockMachineManagerInterface) SetProviderIDFromNodeLabel(arg0 context.Context, arg1 baremetal.ClientGetter) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProviderIDFromNodeLabel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetProviderIDFromNodeLabel indicates an expected call of SetProviderIDFromNodeLabel.
func (mr *MockMachineManagerInterfaceMockRecorder) SetProviderIDFromNodeLabel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProviderIDFromNodeLabel", reflect.TypeOf((*MockMachineManagerInterface)(nil).SetProviderIDFromNodeLabel), arg0, arg1)
}

// SetReadyTrue mocks base method.
func (m *MockMachineManagerInterface) SetReadyTrue() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReadyTrue")
}

// SetReadyTrue indicates an expected call of SetReadyTrue.
func (mr *MockMachineManagerInterfaceMockRecorder) SetReadyTrue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadyTrue", reflect.TypeOf((*MockMachineManagerInterface)(nil).SetReadyTrue))
}

// UnsetFinalizer mocks base method.
func (m *MockMachineManagerInterface) UnsetFinalizer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnsetFinalizer")
}

// UnsetFinalizer indicates an expected call of UnsetFinalizer.
func (mr *MockMachineManagerInterfaceMockRecorder) UnsetFinalizer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetFinalizer", reflect.TypeOf((*MockMachineManagerInterface)(nil).UnsetFinalizer))
}

// Update mocks base method.
func (m *MockMachineManagerInterface) Update(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMachineManagerInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMachineManagerInterface)(nil).Update), arg0)
}
